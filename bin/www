#!/usr/bin/env node

/**
 * Module dependencies.
 */

var https = require('https');
var fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || 443);
var app = require('../app');

/**
 * Create HTTPS server.
 */
var options = {
    key: fs.readFileSync('./ssl/private_key.cer'),
    cert: fs.readFileSync('./ssl/ssl_certificate.cer'),
    ca: [
        fs.readFileSync('./ssl/IntermediateCA.cer')
    ]
};

var server = https.createServer(options, app);
var io = require('socket.io').listen(server, {pingTimeout: 7000, pingInterval: 10000});
io.set("transports", ["websocket", "polling"]);

require('../routes/textChat')(io);
require('../routes/twilioVideo')(io);
/**
 * Listen on provided port, on all network interfaces.
 */
// Initialize a new socket.io object. It is bound to
// the express app, which allows them to coexist.


// Require the configuration and the routes files, and pass
// the app and io as arguments to the returned functions.


// server.listen(port);
server.on('error', onError);

server.listen(port, function () {
    console.log('server up and running at %s port', port);
});

/** * Redirect from http port 80 to https 443 */
var http = require('http');
http.createServer(function (req, res) {
    console.log(">>>", req.url);
    res.writeHead(301, {"Location": "https://" + req.headers['host'] + req.url});
    res.end();
}).listen(80);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
